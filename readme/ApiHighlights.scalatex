@import Main._
@val tests = wd/"fastparse"/"test"/"src"/"fastparse"
@val main = wd/"fastparse"/"src"/"fastparse"

@sect{API Highlights}
    @sect{Parsing Results}
        @p
            The result of a parser comes in two flavors of @hl.scala{Parsed};
            the first is a success (@hl.scala{Parsed.Success}) and the second
            is a failure (@hl.scala{Parsed.Failure}). @hl.scala{Parsed.Success}
            provides the parsed value - the value you are probably most
            interested in - and the index in the input string till where the
            parse was performed. @hl.scala{Parsed.Failure} allows you to
            retrieve the last parser that failed and the index where it failed.
            Additionally, failure provides an @hl.scala{Parsed.Failure.extra}
            field that provides precise details about the failure, in particular,
            and most importantly a complete stack trace of the involved parsers,
            which is accessible via @hl.scala{extra.traced}.

        @hl.ref(tests/"ExampleTests.scala", start = "sealed trait AndOr", end = "}")

        @p
            It is also possible to pattern match over @hl.scala{Parsed}, however, you may experience spurious warnings related to @a("SI-4440", href:="https://issues.scala-lang.org/browse/SI-4440").
            In order to prevent these warnings @hl.scala{import fastparse.core.Result} in versions 0.2.x and @hl.scala{import fastparse.core.Parsed} in higher versions than 0.2.x.

        @p
            An overview of @hl.scala{Parsed}:

        @hl.ref(main/"Parsed.scala")

        @p
            Note how @hl.scala{Failure} only contains the parser which failed
            and a single index where the parse failed. Further debugging
            information is available via the @hl.scala{Failure.Extra} class.
            Especially the @hl.scala{TracedFailure} that is lazily-computed via
            @hl.scala{Extra.traced}, provides valuable information: It performs
            a whole new parse on the input data with additional instrumentation,
            and provides additional insight into why the parse failed.

        @p
            Computing the @hl.scala{Extra.traced} data is not done by default
            for performance reasons: the additional run takes about 3x longer
            than the initial run due to the instrumentation, for a total of 4x
            slowdown. If you want the information for debugging, though, it
            will be there.
